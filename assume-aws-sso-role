#!/usr/bin/env bash

DEFAULT_REGION=eu-west-1

platform=$(uname -s)
credentials_path="${XDG_CACHE_HOME:-"$HOME/.cache"}/aws_az_credentials/"
quiet=false
action=output_json
(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ "${sourced}" -eq 0 ]; then
  exit_cmd="exit"
else
  exit_cmd="return"
fi

az_access_token_api="api://3cd4d944-d89b-401b-b2ae-fb1ece182362"
tenant=1d063515-6cad-4195-9486-ea65df456faa
aws_federation_signin_url="https://us-east-1.signin.aws.amazon.com/federation"
federation_destination_url="https://REGION.console.aws.amazon.com"
logout_url="https://us-east-1.signin.aws.amazon.com/oauth?Action=logout"

aws_profile=
aws_provider=
aws_region=
aws_role_arn=
aws_token=
aws_profile=
aws_role=
aws_account=
aws_role=
aws_session_duration=3600

mkdir -p "${credentials_path}"

echo_maybe() {
  if [ "${quiet}" = false ]; then
    echo >&2 "$*"
  fi
}

iso_8601_to_rfc_822_date() {
  echo "$1" | sed -E 's/\+([[:digit:]][[:digit:]]):([[:digit:]][[:digit:]])/+\1\2/'
}

date_to_seconds() {
  if [ "${platform}" = Darwin ]; then
    date -j -f "%FT%T%z" "$(iso_8601_to_rfc_822_date "$1")" "+%s"
  else
    date -d "$1" "+%s" 2>/dev/null || gdate -d "$expiration" "+%s"
  fi
}

local_time_for() {
  if [ "${platform}" = Darwin ]; then
    date -j -f "%FT%T%z" "$(iso_8601_to_rfc_822_date "$1")"
  else
    date -d "$1"
  fi
}

perform_action_for_credentials() {
  case ${action} in
    open_in_browser)
      if ! open_in_browser "$1"; then
        echo >&2 "Open in browser failed."
        return 1
      fi
      ;;
    set_env_vars)
      echo "export AWS_ACCESS_KEY_ID=$(echo "$1" | jq -r ".AccessKeyId")"
      echo "export AWS_SECRET_ACCESS_KEY=$(echo "$1" | jq -r ".SecretAccessKey")"
      echo "export AWS_SESSION_TOKEN=$(echo "$1" | jq -r ".SessionToken")"
      echo "export AWS_DEFAULT_REGION=${DEFAULT_REGION}"
      echo "export AWS_REGION=${aws_region}"
      ;;
    output_json)
      echo "$1"
      ;;
    *)
      echo >&2 Unknown action ${action}
      return 1
      ;;
  esac
}

account_number_from_role_arn() {
  echo "$1" | cut -d ':' -f 5
}

role_name_from_role_arn() {
  echo "$1" | cut -d ':' -f 6 | cut -d '/' -f 2
}

set_role_arn_from_account_and_role() {
  aws_role_arn="arn:aws:iam::${aws_account}:role/${aws_role}"
}

set_account_and_role_from_role_arn() {
  aws_account=$(account_number_from_role_arn "${aws_role_arn}")
  aws_role=$(role_name_from_role_arn "${aws_role_arn}")
}

role_info_from_profile() {
  if [ -z "${aws_region}" ]; then
    aws_region=$(aws configure get region --profile "${aws_profile}")
  fi
  if [ -z "${aws_region}" ]; then
    echo_maybe "Region not found in profile ${aws_profile}."
  fi

  aws_role_arn=$(aws configure get role_arn --profile "${aws_profile}")
  result=$?
  if [ ${result} -ne 0 ]; then
    return 1
  fi
  set_account_and_role_from_role_arn
}

url_encode() {
  echo "$1" | jq "@uri" -jR
}

signin_token_for() {
  local get_signin_token_params
  get_signin_token_params=$(echo "$1" | jq '. + {"sessionId": .AccessKeyId, "sessionKey": .SecretAccessKey, "sessionToken": .SessionToken} | del(.AccessKeyId) | del(.SecretAccessKey) | del(.SessionToken) | del(.Version) | del(.Expiration)')
  curl --silent --get --data-urlencode "Action=getSigninToken" --data-urlencode "Session=${get_signin_token_params}" ${aws_federation_signin_url} | jq -r .SigninToken
}

browser_url() {
  local signin_token
  signin_token=$(signin_token_for "$1")
  local federation_destination_url_encoded
  federation_destination_url_encoded=$(url_encode ${federation_destination_url//REGION/${aws_region}})
  local federation_url
  federation_url="${aws_federation_signin_url}?Action=login&Issuer=&SigninToken=${signin_token}&Destination=${federation_destination_url_encoded}"
  local federation_url_encoded
  federation_url_encoded=$(url_encode "${federation_url}")
  echo "${logout_url}&redirect_uri=${federation_url_encoded}"
}

open_in_browser() {
    if [ "${platform}" = Darwin ]; then
      open "$(browser_url "$1")"
    else
      echo >&2 "Unsupported platform"
      return 1
    fi
}

load_credentials_from_file() {
  credentials=$(cat "${credentials_file}")
  expiration=$(echo "${credentials}" | jq -r ".Expiration")
  expiration_in_seconds=$(date_to_seconds "${expiration}")
  now_in_seconds=$(date "+%s")
  if [ "${expiration_in_seconds}" -gt "${now_in_seconds}" ]; then
    if ! perform_action_for_credentials "${credentials}"; then
      echo >&2 "Performing action ${action} failed."
      return 1
    fi
    echo_maybe "Credentials expires at $(local_time_for "${expiration}")"
    return 0
  else
    return 1
  fi
}

__usage="Assume a role on an AWS account using the token exchange method. The
region, account number, and role can be supplied in two different and mutually
exclusive ways: Either an account number and role is supplied on the command
line or a profile name referring to a profile in AWS's config file is supplied.

Common options:

    -h: Print this help and exit.

    -b: Open AWS console in default browser

    -d: The AWS session duration in seconds. Defaults to 3600 seconds (1 hour).

    -e: The region to use. If this is supplied then it overrides any region
        supplied in the AWS config file (see below).

    -j: Output temporary credentials in JSON format.

    -q: Suppress all non-error output. If not supplied, status and progress
        messages are written to stderr.

    -v: Print export statements to set environment variables. Use eval to set
        the variables.

        Example:

        eval \$(assume-aws-sso-role -a <account number> -r <role> -v)

Supply account number and role to assume

    -a: Account number

    -r: Role to assume

    Example:

    assume-aws-sso-role -a <account number> -r <role>


Read role ARN and account number from AWS config

    In this mode the script looks for a profile with a given name in $HOME/.aws/config.

    -p <profile name>: Profile to fetch information from

    assume-aws-sso-role -p <profile name>

    E.g., if there is a section in the config file with the structure

    [profile my-profile]
    role_arn = arn:aws:iam::123456789012:role/SSO-My-Role

    then we can assume the role just by executing

    assume-aws-sso-role -p my-profile

    If a region is supplied in the profile and a region is not supplied in
    the -e option then it's used in the assume role step."

function help() {
  echo "$__usage"
}

OPTIND=1
while getopts "hbjqva:d:r:p:e:" option; do
  case "${option}" in
    h)
      help
      ${exit_cmd} 0
      ;;
    a)
      aws_account=$OPTARG
      ;;
    b)
      action=open_in_browser
      ;;
    e)
      aws_region=$OPTARG
      ;;
    d)
      aws_session_duration=$OPTARG
      ;;
    j)
      action=output_json
      ;;
    p)
      aws_profile=$OPTARG
      ;;
    r)
      aws_role=$OPTARG
      ;;
    q)
      quiet=true
      ;;
    v)
      action=set_env_vars
      ;;
    *)
      echo >&2 Unknown option "${option}"
      ${exit_cmd} 1
      ;;
  esac
done
shift "$((OPTIND - 1))"

if [ -n "${aws_profile}" ] && [[ -n "${aws_account}" || -n "${aws_role}" ]]; then
  echo >&2 Profile and account/role options are not allowed at the same time
  ${exit_cmd} 2
fi

if [[ -z "${aws_profile}" && -z "${aws_account}" && -z "${aws_role}" ]]; then
  echo >&2 Either -p or -a and -r must be provided
  ${exit_cmd} 4
fi

if [ -n "${aws_profile}" ]; then
  if ! role_info_from_profile; then
    echo >&2 "Role ARN for profile ${aws_profile} not found."
    ${exit_cmd} 3
  fi
else
  set_role_arn_from_account_and_role
fi

credentials_file=$credentials_path/$aws_account-$aws_role.creds
if [ -f "${credentials_file}" ]; then
  echo_maybe "Loading credentials from file"
  if load_credentials_from_file; then
    ${exit_cmd} 0
  fi
fi

if [ -z "${aws_region}" ]; then
  echo_maybe "Region not supplied. Using ${DEFAULT_REGION}."
  aws_region=${DEFAULT_REGION}
fi

echo_maybe "Region is ${aws_region}"
echo_maybe "Role arn is ${aws_role_arn}"
echo_maybe "Aws account is ${aws_account}"

aws_provider="arn:aws:iam::${aws_account}:saml-provider/AzureAD"

# Obtain token for OIDCtoSAML endpoint
echo_maybe "Getting access token"
if ! access_token=$(az account get-access-token --resource ${az_access_token_api} --query accessToken --output tsv); then
  echo_maybe "Fetching access token failed. Attempting new log in."
  if ! az login --output none --tenant ${tenant} 2>/dev/null; then
    echo >&2 "Login failed"
    ${exit_cmd} 3
  fi
  echo_maybe "Retry getting access token"
  if ! access_token=$(az account get-access-token --resource ${az_access_token_api} --query accessToken --output tsv); then
    echo >&2 "Acquire access token failed"
    ${exit_cmd} 3
  fi
fi
echo_maybe "Access token is ${access_token}"

# Convert to SAML token using endpoint
echo_maybe "Getting SAML token"
saml_token=$(curl --silent "https://ws-iam-commontools-oidc2saml.azurewebsites.net/api/TokenExchange/SAMLResponse?IdentifierUri=https://signin.aws.amazon.com/saml/${aws_account}" -H "Authorization: Bearer ${access_token}")
echo_maybe "SAML token is ${saml_token}"

# Assume role in AWS
echo_maybe "Assuming role in AWS using role ARN ${aws_role_arn} and principal ${aws_provider}"
if ! aws_token=$(env -u AWS_PROFILE aws sts assume-role-with-saml --duration-seconds "${aws_session_duration}" --region "${aws_region}" --role-arn "$aws_role_arn" --principal-arn "$aws_provider" --saml-assertion "$saml_token" --query "Credentials" | jq ".Version = 1"); then
  echo >&2 "Acquire AWS token failed"
  ${exit_cmd} 3
fi
echo_maybe "aws_token is ${aws_token}"

expiration=$(echo "${aws_token}" | jq -r ".Expiration")
echo_maybe "Token expires at ${expiration}"

echo "${aws_token}" >"${credentials_file}"

perform_action_for_credentials "${aws_token}"
expiration=$(echo "${aws_token}" | jq -r ".Expiration")
echo_maybe "Credentials expires at $(local_time_for "${expiration}")"
