#!/usr/bin/env bash

DEFAULT_REGION=eu-west-1

platform=$(uname -s)
credentials_path="${XDG_CACHE_HOME:-"$HOME/.cache"}/aws_az_credentials/"
quiet=false
action=set_env_vars
(return 0 2>/dev/null) && sourced=1 || sourced=0

az_access_token_api="api://3cd4d944-d89b-401b-b2ae-fb1ece182362"
tenant=1d063515-6cad-4195-9486-ea65df456faa

aws_profile=
aws_provider=
aws_region=
aws_role_arn=
aws_token=
aws_profile=
aws_role=
aws_account=
aws_role=

mkdir -p ${credentials_path}

echo_maybe() {
    if [ "${quiet}" = false ]; then
        >&2 echo $*
    fi
}

date_to_seconds() {
    if [ ${platform} = Darwin ]; then
        date -u -j -f "%FT%T" "$1" "+%s" 2>/dev/null
    else
        date -d "$1" "+%s" 2>/dev/null || gdate -d "$expiration" "+%s"
    fi
}

local_time_for() {
    time_and_date_in_seconds=$(date_to_seconds $1)
    if [ ${platform} = Darwin ]; then
        echo $(date -j -f "%s" ${time_and_date_in_seconds})
    else
        echo $(date -d "@${time_and_date_in_seconds}")
    fi
}

output_from_credentials() {
    if [ ${action} = set_env_vars ]; then
        echo_maybe Setting environment variables
        export AWS_ACCESS_KEY_ID=$(echo $1 | jq -r '.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $1 | jq -r '.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $1 | jq -r '.SessionToken')
        export AWS_DEFAULT_REGION=${DEFAULT_REGION}
        export AWS_REGION=${aws_region}
    else
        echo $1
    fi
}

account_number_from_role_arn() {
    echo "$1" | cut -d ':' -f 5
}

role_name_from_role_arn() {
    echo "$1" | cut -d ':' -f 6 | cut -d '/' -f 2
}

set_role_arn_from_account_and_role() {
    aws_role_arn="arn:aws:iam::${aws_account}:role/${aws_role}"
}

set_account_and_role_from_role_arn() {
    aws_account=$(account_number_from_role_arn ${aws_role_arn})
    aws_role=$(role_name_from_role_arn ${aws_role_arn})
}

role_info_from_profile() {
    if [ -z "${aws_region}" ]; then
        aws_region=$(aws configure get ${aws_profile}.region)
    fi
    if [ -z "${aws_region}" ]; then
        echo_maybe "Region not found in profile ${aws_profile}."
    fi

    aws_role_arn=$(aws configure get ${aws_profile}.role_arn)
    result=$?
    if [ ${result} -ne 0 ]; then
        return 1
    fi
    set_account_and_role_from_role_arn
}

load_credentials_from_file() {
    credentials=$(cat ${credentials_file})
    expiration=$(echo ${credentials} | jq -r ".Expiration")
    expiration_in_seconds=$(date_to_seconds ${expiration})
    now_in_seconds=$(date "+%s")
    if [ ${expiration_in_seconds} -gt ${now_in_seconds} ]; then
        output_from_credentials "${credentials}"
        echo_maybe Credentials expires at $(local_time_for ${expiration})
    fi
}


__usage="Assume a role on an AWS account using the token exchange method. The
region, account number, and role can be supplied in two different and mutually
exclusive ways: Either an account number and role is supplied on the command
line or a profile name referring to a profile in AWS's config file is supplied.

Common options:

    -q: Suppress all non-error output. If not supplied, status and progress
        messages are written to stderr.

    -j: Output temporary credentials in JSON format.

    -e: The region to use. If this is supplied then it overrides any region
        supplied in the AWS config file (see below).

Supply account number and role to assume

    -a: Account number

    -r: Role to assume

    Example:

    assume_role -a <account number> -r <role>


Read role ARN and account number from AWS config

    In this mode the script looks for a profile with a given name in $HOME/.aws/config.

    -p <profile name>: Profile to fetch information from

    assume_role -p <profile name>

    E.g., if there is a section in the config file with the structure

    [profile my-profile]
    role_arn = arn:aws:iam::123456789012:role/SSO-My-Role

    then we can assume the role just but executing

    assume_role -p my-profile

    If a region is supplied in the profile and a region is not supplied in
    the -e option then it's used in the assume role step."

function help()
{
    echo "$__usage"
}

OPTIND=1
while getopts "hjqa:r:p:e:" option; do
    case "${option}" in
        h)
            help
            if [ ${sourced} = 0 ]; then
                exit 0
            else
                return 0
            fi
            ;;
        q)
            quiet=true
            ;;
        j)
            action=output_json
            ;;
        a)
            aws_account=$OPTARG
            ;;
        r)
            aws_role=$OPTARG
            ;;
        p)
            aws_profile=$OPTARG
            ;;
        e)
            aws_region=$OPTARG
            ;;
        *)
            >&2 echo Unknown option ${option}
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"

if [ ! -z "${aws_profile}" ] && [[ ! -z "${aws_account}" || ! -z "${aws_role}" ]]; then
    >&2 echo Profile and account/role options are not allowed at the same time
    if [ ${sourced} = 0 ]; then
        exit 2
    else
        return 2
    fi
fi

if [[ -z "${aws_profile}" && -z "${aws_account}" && -z "${aws_role}" ]]; then
    >&2 echo Either -p or -a and -r must be provided
    if [ ${sourced} = 0 ]; then
        exit 4
    else
        return 4
    fi
fi

if [ ! -z "${aws_profile}" ]; then
    role_info_from_profile
    if [ $? -ne 0 ]; then
        >&2 echo Role ARN for profile ${aws_profile} not found.
        if [ ${sourced} = 0 ]; then
            exit 3
        else
            return 3
        fi
    fi
else
    set_role_arn_from_account_and_role
fi

credentials_file=$credentials_path/$aws_account-$aws_role.creds
if [ -f "${credentials_file}" ]; then
    echo_maybe Loading credentials from file
    load_credentials_from_file
    if [ ${sourced} = 0 ]; then
        exit 0
    else
        return 0
    fi
fi

if [ -z "${aws_region}" ]; then
    if [ "${quiet}" = false ]; then
        >&2 echo Region for not supplied. Using ${DEFAULT_REGION}.
    fi
    aws_region=${DEFAULT_REGION}
fi

if [ "${quiet}" = false ]; then
    >&2 echo Region is ${aws_region}
    >&2 echo Role arn is ${aws_role_arn}
    >&2 echo Aws account is ${aws_account}
fi

aws_provider="arn:aws:iam::${aws_account}:saml-provider/AzureAD"

# Obtain token for OIDCtoSAML endpoint
if [ "${quiet}" = false ]; then
    >&2 echo Getting access token
fi
access_token=$(az account get-access-token --resource ${az_access_token_api} --query accessToken --output tsv)
if [ $? != 0 ]; then
    echo_maybe "Fetching access token failed. Attempting new log in."
    az login --output none --tenant ${tenant} 2>/dev/null
    if [ $? != 0 ]; then
        >&2 echo Login failed
        if [ ${sourced} = 0 ]; then
            exit 3
        else
            return 3
        fi
    fi
    echo_maybe Retry getting access token
    access_token=$(az account get-access-token --resource ${az_access_token_api} --query accessToken --output tsv)
    if [ $? != 0 ]; then
        >&2 echo Acquire access token failed
        if [ ${sourced} = 0 ]; then
            exit 3
        else
            return 3
        fi
    fi
fi
echo_maybe Access token is $access_token

# Convert to SAML token using endpoint
echo_maybe Getting SAML token
saml_token=$(curl --silent "https://ws-iam-commontools-oidc2saml.azurewebsites.net/api/TokenExchange/SAMLResponse?IdentifierUri=https://signin.aws.amazon.com/saml/${aws_account}" -H "Authorization: Bearer ${access_token}")
echo_maybe SAML token is $saml_token

# Assume role in AWS
echo_maybe Assuming role in AWS using role ARN ${aws_role_arn} and principal ${aws_provider}
aws_token=$(env -u AWS_PROFILE aws sts assume-role-with-saml --region ${aws_region} --role-arn "$aws_role_arn" --principal-arn "$aws_provider" --saml-assertion "$saml_token" --query "Credentials" | jq ".Version = 1")
if [ $? != 0 ]; then
    >&2 echo Acquire AWS token failed
    if [ ${sourced} = 0 ]; then
        exit 3
    else
        return 3
    fi
fi
echo_maybe aws_token is ${aws_token}

expiration=$(echo ${aws_token} | jq -r ".Expiration")
echo_maybe Token expires at ${expiration}

echo ${aws_token} >${credentials_file}
output_from_credentials "${aws_token}"

expiration=$(echo ${aws_token} | jq -r ".Expiration")
echo_maybe Credentials expires at $(local_time_for ${expiration})
